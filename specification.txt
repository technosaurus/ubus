UBUS SPECIFICATION DRAFT

   The Unix Stream Bus

1. Motivation

   System V IPC mechanisms offer no utils for situations
   where multiple processes shall be connected.
   Typical applications are system/session daemons which 
   can be accessed by multiple other processes.
   Those applications either have to provide their own
   mechanism, or use dbus.
   Ubus provides such functionality without the need for 
   a system daemon. Its implementation is meant to be simple.
   A ubus implementation can easily be written in pure shell
   (if the shell supports sockets). 
   Ubus establishes bidirectional multicast pipes. While 
   they can be used for any purpose, this specification
   also provides a standard protocol for RMI.

2. Bus

   A bus is a unix domain socket (AF_UNIX and SOCK_STREAM)
   located in:
          /var/ipc/application_name/
   or
          ~/.ipc/application_name/

   depending on, if the owner is a system or session service.

3. Services

   Services are applications providing one or multiple buses.
   They create the socket in the appropriate directory, listen
   for incoming requests, and destroy the bus when they see fit.
   Applications MUST delete the bus on exit, even when exiting
   due to a signal.
   The on disk layout of buses SHOULD reflect the logical object
   layout of the application. The applications ipc directory
   may contain sub-directories.

4. Connections

   A connection is a bidirectional pipe established with a bus.
   An application may establish a connection with a bus, by 
   simply connecting to the file via connect (3).

5. RMI

   Ubus can be used for Remote Method Invocation. 

   5.1 Format

      A call consists of multiple arguments seperated 
      by tab (ascii 9) and terminated by newline (ascii 10).

      A call contains zero or more arguments.
      Implementations MUST at least support a call size
      (until \n) of 1024Bytes. They SHOULD support
      unlimited size. Exceeding the implementation
      limit SHOULD result in an immediate disconnect.

      An argument is a utf8 string.
      Control characters in arguments are encoded:
      0 (null) -->   \0  ( 92 followed by 96 )
      7 (bell) -->  \a  (  92 followed by 97 )
      8 (backspace) --> \b
      9 (tab) --> \t
      10 (newline) --> \n
      12 (formfeed) --> \f
      13 (return)  --> \r
      27 (escape)  --> \e
      \ is encoded as \\

      Any line beginning with an unencoded control character,
      other then tab (ascii 9), is not data, and MUST be 
      handled separately.

      Errors can be indicated by sending a bell (ascii 7)
      then an error number, then optionally tab followed by
      a message, then newline.
      The error number SHOULD be a posix errno. If it is not,
      it MUST NOT clash with a posix errno.

      Other control characters are reserved for future use.
      Lines beginning with such a character, MUST be ignored.
   
      If the format is not RMI, the bus MUST have a file 
      ending embedding a format hint. Multiple format hints 
      can be concatenated.        


   5.2  Signals

      A signal is a bus, where each connection receives 
      a call when a specific event in the service happened.
      Calls sent towards the service are either ignored,
      or not synchronized.

      Signals carry the file ending ".signal".

   5.3  Methods

      On a method connection, a call is sent to the
      service, then the service responds with the 
      return value. Each request MUST be followed by a 
      response, in the same order they were sent.

      Methods carry the file ending ".method".

   5.4  Properties

      Upon connection, the service immediately sends the 
      current value to the client. A client may then send 
      a new value. If the new value is accepted, it is 
      again written to all connections. If it is rejected
      an error (bell) COULD BE sent and the connection is 
      terminated.

      Properties carry the file ending ".property". 
      

6.  Restful bus
        
   A client first sends a request,  then closes the write 
   channel. The service sends a response, and closes the
   read channel. Both request and response may be empty.
   Error handling must be implemented at application
   level.

   Rest buses carry the file ending ".rest". 
 
   The data is not encoded and can be arbitrary. 
   If it is not utf8 plain text, a format hint is required, 
   the hint is appended. eg: "printer/print.rest.ps"

6. Bus discovery and recovery

   Applications may establish connections to services that 
   are not started yet. Implementations SHOULD use inotify
   or other available utils to monitor the path for creation
   of the file.
   If a socket is a zombie, implementations SHOULD attemp to
   reconnect when the file is recreated. Implementations 
   MUST handle unexpected disconnect gracefully. They SHOULD
   provide an option for automatic reconnection.

7. Security

   Standard unix file permissions are used to prevent access 
   from unauthorized users. Access rights SHOULD NOT change. 
   Implementations MUST fail immediately to connect to a socket 
   without required permissions ( as opposed to trying until 
   success )

8. Buses on remote hosts

   Implementations SHOULD provide a way to connect to a bus 
   on a remote machine, via ssh. 
   The url format for remote buses is:
      user:password@host:/path/to/bus
   user and password are optional. if the path does not begin 
   with a /, it is relative to the remote home directory.
   Implementations may assume the "ubus" binary to be available
   on the remote host, so they may simple popen (3):
      "ssh host ubus connect /path/to/bus"

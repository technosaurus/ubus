UBUS SPECIFICATION 1.0

1. Motivation

  System V IPC mechanisms offer no utils for situations
  where multiple processes shall be connected.
  Typical applications are system/session daemons which 
  can be accessed by multiple other processes.
  Those applications either have to provide their own
  mechanism, or use dbus.
  Ubus provides such functionality without the need for 
  a system daemon. Its implementation is meant to be simple.

2. Bus

  A bus is a unix domain socket (AF_UNIX and SOCK_STREAM)
  located in:
          /var/ipc/application_name/
  or
          ~/.ipc/application_name/

  depending on, if the owner is a system or session service.

3. Services

  Services are applications providing one or multiple buses.
  They create the socket in the appropriate directory, listen
  for incoming requests, and destroy the bus when they see fit.
  Applications MUST delete the bus on exit, even when exiting
  due to a signal.
  The on disk layout of buses shall reflect the logical object
  layout of the application. The applications ipc directory
  may contain sub-directories.

4. Connections

   A connection is a bidirectional pipe established with a bus.
   An application may establish a connection with a bus, by 
   simply connecting to the file via connect (3).

5. RMI format
   Ubus can be used for Remote Method Invocation. 

   A call consists of multiple utf8 strings seperated 
   by tab (ascii 9) and terminated by newline (ascii 10).
   A call may contain zero arguments.

   Control characters in arguments are encoded:
   0 (null) -->   \0  ( 92 followed by 96 )
   7 (bell) -->  \a  (  92 followed by 97 )
   8 (backspace) --> \b
   9 (tab) --> \t
   10 (newline) --> \n
   12 (formfeed) --> \f
   13 (return)  --> \r
   27 (escape)  --> \e
   \ is encoded as \\

   Errors can be indicated by sending a bell (ascii 7)
   then an error message then newline (10).
   Connections receiving an error message, MUST be closed
   and MUST NOT be used anymore.

   If the format is not one of the below, the bus should 
   have a file ending embedding a format hint, 
   such as "~/.ipc/cups/printers/brother/print.rest.ps
   Multiple format hints can be concatenated.

   6.1  Signals
        A signal is a bus, where each connection receives 
        a call when a specific event in the service happened.
        Data sent towards the service is ignored. 

        Signals shall carry the file ending ".signal".

   5.3  Methods
        On a method connection, a call is sent to the
        service, then the service responds with the 
        return value. Each request MUST be followed by a 
        response, in the same order they were sent.

        Methods shall carry the file ending ".method".


   5.4  Properties
        Upon connection, the service immediately sends the 
        current value to the client. A client may then send 
        a new value. If the new value is accepted, it is 
        again written to all connections. If it is rejected
        an error (bell) MAY BE sent and the connection is 
        terminated.

        Properties shall carry the file ending ".property". 

   5.5  Restful methods
        A client first sends a request,  then closes the write 
        channel. The service sends a response, and closes the
        read channel. Both request and response may be empty.
        Error handling should be implemented at application
        level.

        Rest buses shall carry the file ending ".rest". 
        
        The data is not encoded and can be arbitary. 
        If it is not utf8 plain text, a format hint is required, 
        the hint is appended. eg:  "set_picture.rest.png"

6. Bus discovery

    Applications may establish connections to services that 
    are not started yet. Implementations should use inotify
    or other available utils to monitor the path for creation
    of the file.
    If a socket is a zombie, implementations should attemp to
    reconnect when the file is recreated.
